package com.babyspace.mamshare.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.babyspace.mamshare.framework.db.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NOTE.
 */
public class MAreaDao extends AbstractDao<MArea, Long> {

    public static final String TABLENAME = "MArea";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property areaId = new Property(1, String.class, "areaId", false, "areaId");
        public final static Property areaType = new Property(2, String.class, "areaType", false, "areaType");
        public final static Property areaName = new Property(3, String.class, "areaName", false, "areaName");
        public final static Property parentId = new Property(4, String.class, "parentId", false, "parentId");
        public final static Property zip = new Property(5, String.class, "zip", false, "zip");
    }

    public MAreaDao(DaoConfig config) {
        super(config);
    }

    public MAreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MArea' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'areaId' TEXT NOT NULL ," + // 1: 哈哈
                "'areaType' TEXT," + // 2: 类型
                "'areaName' TEXT," + // 3: 名字
                "'parentId' TEXT," + // 4: 上一个
                "'zip' TEXT);"); // 5: 邮编
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MArea entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAreaId());
        stmt.bindString(3, entity.getAreaType());
        stmt.bindString(4, entity.getAreaName());
        stmt.bindString(5, entity.getParentId());
        stmt.bindString(6, entity.getZip());

    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MArea readEntity(Cursor cursor, int offset) {
        MArea entity = new MArea( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // text
                cursor.getString(offset + 2), // text
                cursor.getString(offset + 3), // text
                cursor.getString(offset + 4), // text
                cursor.getString(offset + 5)// text

        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MArea entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaId(cursor.getString(offset + 1));
        entity.setAreaType(cursor.getString(offset + 2));
        entity.setAreaName(cursor.getString(offset + 3));
        entity.setParentId(cursor.getString(offset + 4));
        entity.setZip(cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MArea entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MArea entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
